import LinkedList from "../CircularLinkedList";
describe("test LinkedList methods", () => {
  test("test linkedList push insert size isEmpty getElementAt getHead getTail indexOf method", () => {
    const linkedList = new LinkedList<number>();
    expect(linkedList.isEmpty()).toBeTruthy();
    expect(linkedList.size()).toBe(0);
    linkedList.push(10);
    expect(linkedList.getElementAt(0)?.next).not.toBeUndefined();
    expect(linkedList.getElementAt(0)?.element).toBe(10);
    expect(linkedList.getHead()?.element).toBe(10);
    expect(linkedList.getTail()?.element).toBe(10);
    expect(linkedList.getTail()?.next?.element).toBe(10);
    expect(linkedList.indexOf(10)).toBe(0);
    expect(linkedList.size()).toBe(1);
    linkedList.push(20);
    expect(linkedList.getElementAt(0)?.element).toBe(10);
    expect(linkedList.getElementAt(0)?.next?.element).toBe(20);
    expect(linkedList.getElementAt(1)?.element).toBe(20);
    expect(linkedList.getHead()?.element).toBe(10);
    expect(linkedList.getTail()?.element).toBe(20);
    expect(linkedList.getTail()?.next?.element).toBe(10);
    expect(linkedList.indexOf(10)).toBe(0);
    expect(linkedList.indexOf(20)).toBe(1);
    expect(linkedList.size()).toBe(2);
    linkedList.insert(30, 1);
    expect(linkedList.size()).toBe(3);
    expect(linkedList.indexOf(20)).toBe(2);
    expect(linkedList.getElementAt(0)?.element).toBe(10);
    expect(linkedList.getElementAt(1)?.element).toBe(30);
    expect(linkedList.getElementAt(1)?.next?.element).toBe(20);
    expect(linkedList.getHead()?.element).toBe(10);
    expect(linkedList.getTail()?.element).toBe(20);
    expect(linkedList.getTail()?.next?.element).toBe(10);
    linkedList.push(40);
    linkedList.push(50);
    linkedList.push(60);
    expect(linkedList.toString()).toEqual("10,30,20,40,50,60");
    linkedList.reverse();
    expect(linkedList.toString()).toEqual("60,50,40,20,30,10");
    expect(linkedList.getHead()?.element).toBe(60);
    expect(linkedList.getTail()?.element).toBe(10);
    expect(linkedList.getTail()?.next?.element).toBe(60);
  });
});
